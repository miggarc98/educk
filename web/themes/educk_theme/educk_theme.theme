<?php

declare(strict_types=1);
use Kint\Kint;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Menu\MenuTree;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
/**
 * @file
 * Functions to support theming in the educk_theme theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function educk_theme_preprocess_html(array &$variables): void {

}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function educk_theme_preprocess_page(array &$variables): void {
  $user = \Drupal::currentUser();

  // Verifica si el usuario está logueado.
  if ($user->isAuthenticated()) {
      // Intenta obtener el administrador de bloques.
      $block_manager = \Drupal::service('plugin.manager.block');

      // Verifica si el servicio de gestión de bloques está disponible.
      if ($block_manager) {
          // Agrega un bloque para el menú de cuenta de usuario.
          $account_menu_block = $block_manager->createInstance('educk_theme_account_menu', []);
          if ($account_menu_block) {
              $variables['account_menu'] = $account_menu_block->build(); // Asegúrate de asignar a 'account_menu'.
              
          } else {
              \Drupal::logger('educk_theme')->error('No se pudo crear el bloque educk_theme_account_menu.');
          }
      } else {
          \Drupal::logger('educk_theme')->error('El servicio de plugin.manager.block no está disponible.');
      }
  }
}
function educk_theme_preprocess_menu(&$variables) {
    $current_user = \Drupal::currentUser();
    $variables['user_name'] = $current_user->getDisplayName();
    if ($variables['menu_name'] == 'main') {  // Asumiendo que 'main' es el nombre de tu menú principal
        // Intenta obtener el administrador de bloques.
        $block_manager = \Drupal::service('plugin.manager.block');
    
        // Verifica si el servicio de gestión de bloques está disponible.
        if ($block_manager) {
          // Agrega un bloque para el menú de cuenta de usuario.
          $account_menu_block = $block_manager->createInstance('system_menu_block:account', []);
          if ($account_menu_block) {
            $variables['account_menu'] = $account_menu_block->build();
          } else {
            \Drupal::logger('educk_theme')->error('No se pudo crear el bloque del menú de cuenta.');
          }
        } else {
          \Drupal::logger('educk_theme')->error('El servicio de plugin.manager.block no está disponible.');
        }
    }
    
  }


    


/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function educk_theme_preprocess_node(array &$variables): void {

}




/**
 * Implements hook_preprocess_HOOK() for status messages.
 */
function educk_theme_preprocess_status_messages(&$variables) {
  $messenger = \Drupal::messenger();
  $messages = $messenger->all();
  $messenger->deleteAll();

  $variables['message_list'] = [];
  foreach ($messages as $type => $messages) {
    foreach ($messages as $message) {
      $variables['message_list'][] = [
        'type' => $type,
        'message' => $message,
        'bootstrap_type' => _educk_theme_map_message_type($type),
      ];
    }
  }
}

/**
 * Helper function to map Drupal message types to Bootstrap alert types.
 */
function _educk_theme_map_message_type($type) {
  $map = [
    'status' => 'success',
    'warning' => 'warning',
    'error' => 'danger',
  ];
  return isset($map[$type]) ? $map[$type] : 'info';
}

